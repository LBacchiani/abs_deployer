module FredhopperCloudServices;

import * from ABS.DC;

/**************************************************************
// Definitions needed to parse the cost annotations
**************************************************************/

data DeployParamSpecification = Req | List(Int) | Default(String) | User ;
data DeployScenarioElement = MaxUse(Int) | Cost(String, Int) | Param(String, DeployParamSpecification) | Name(String);
type Deploy = List<DeployScenarioElement>;

type SmartDeploy = String;

interface SmartDeployInterface {
	List<EndPoint> getEndPoint();
	List<IQueryService> getIQueryService();
	List<Service> getService();
	List<ServiceProvider> getServiceProvider();
	List<LoadBalancerService> getLoadBalancerService();
	List<DeploymentService> getDeploymentService();
	List<PlatformService> getPlatformService();
	List<MonitorPlatformService> getMonitorPlatformService();
	List<InfrastructureService> getInfrastructureService();
	List<DeploymentComponent> getDeploymentComponent();
	Unit deploy();
	Unit undeploy();
}

class MainSmartDeployer(CloudProvider cloudProvider, DeploymentComponent amazon_eu) implements SmartDeployInterface {

	List<EndPoint> ls_EndPoint = Nil;
	List<IQueryService> ls_IQueryService = Nil;
	List<Service> ls_Service = Nil;
	List<ServiceProvider> ls_ServiceProvider = Nil;
	List<LoadBalancerService> ls_LoadBalancerService = Nil;
	List<DeploymentService> ls_DeploymentService = Nil;
	List<PlatformService> ls_PlatformService = Nil;
	List<MonitorPlatformService> ls_MonitorPlatformService = Nil;
	List<InfrastructureService> ls_InfrastructureService = Nil;
	List<DeploymentComponent> ls_DeploymentComponent = Nil;

	List<EndPoint> getEndPoint() { return ls_EndPoint; }
	List<IQueryService> getIQueryService() { return ls_IQueryService; }
	List<Service> getService() { return ls_Service; }
	List<ServiceProvider> getServiceProvider() { return ls_ServiceProvider; }
	List<LoadBalancerService> getLoadBalancerService() { return ls_LoadBalancerService; }
	List<DeploymentService> getDeploymentService() { return ls_DeploymentService; }
	List<PlatformService> getPlatformService() { return ls_PlatformService; }
	List<MonitorPlatformService> getMonitorPlatformService() { return ls_MonitorPlatformService; }
	List<InfrastructureService> getInfrastructureService() { return ls_InfrastructureService; }
	List<DeploymentComponent> getDeploymentComponent() { return ls_DeploymentComponent; }

	Unit deploy() {
		DeploymentComponent c3_xlarge_1 = cloudProvider.prelaunchInstanceNamed("c3.xlarge");
		ls_DeploymentComponent = Cons(c3_xlarge_1,ls_DeploymentComponent);
		DeploymentComponent c3_xlarge_0 = cloudProvider.prelaunchInstanceNamed("c3.xlarge");
		ls_DeploymentComponent = Cons(c3_xlarge_0,ls_DeploymentComponent);
		DeploymentComponent c3_xlarge_3 = cloudProvider.prelaunchInstanceNamed("c3.xlarge");
		ls_DeploymentComponent = Cons(c3_xlarge_3,ls_DeploymentComponent);
		DeploymentComponent c3_xlarge_2 = cloudProvider.prelaunchInstanceNamed("c3.xlarge");
		ls_DeploymentComponent = Cons(c3_xlarge_2,ls_DeploymentComponent);
		[DC: c3_xlarge_1] LoadBalancerService oDef___LoadBalancerServiceImpl_0_c3_xlarge_1 = new LoadBalancerServiceImpl();
		ls_LoadBalancerService = Cons(oDef___LoadBalancerServiceImpl_0_c3_xlarge_1, ls_LoadBalancerService);
		[DC: amazon_eu] InfrastructureService oamazon_scenario___InfrastructureServiceImpl_0____9ec5ec0434174d9cbab1a7bd4e51f476_0 = new InfrastructureServiceImpl();
		ls_InfrastructureService = Cons(oamazon_scenario___InfrastructureServiceImpl_0____9ec5ec0434174d9cbab1a7bd4e51f476_0, ls_InfrastructureService);
		[DC: c3_xlarge_0] MonitorPlatformService oDef___PlatformServiceImpl_0_c3_xlarge_0 = new PlatformServiceImpl(oDef___LoadBalancerServiceImpl_0_c3_xlarge_1);
		ls_MonitorPlatformService = Cons(oDef___PlatformServiceImpl_0_c3_xlarge_0, ls_MonitorPlatformService);
		ls_PlatformService = Cons(oDef___PlatformServiceImpl_0_c3_xlarge_0, ls_PlatformService);
		[DC: c3_xlarge_3] DeploymentService oDef___DeploymentServiceImpl_0_c3_xlarge_3 = new DeploymentServiceImpl(oamazon_scenario___InfrastructureServiceImpl_0____9ec5ec0434174d9cbab1a7bd4e51f476_0, oDef___PlatformServiceImpl_0_c3_xlarge_0);
		ls_DeploymentService = Cons(oDef___DeploymentServiceImpl_0_c3_xlarge_3, ls_DeploymentService);
		[DC: c3_xlarge_0] ServiceProvider oDef___ServiceProviderImpl_0_c3_xlarge_0 = new ServiceProviderImpl(oDef___PlatformServiceImpl_0_c3_xlarge_0, oDef___LoadBalancerServiceImpl_0_c3_xlarge_1);
		ls_ServiceProvider = Cons(oDef___ServiceProviderImpl_0_c3_xlarge_0, ls_ServiceProvider);
		[DC: c3_xlarge_2] DeploymentService oDef___DeploymentServiceImpl_0_c3_xlarge_2 = new DeploymentServiceImpl(oamazon_scenario___InfrastructureServiceImpl_0____9ec5ec0434174d9cbab1a7bd4e51f476_0, oDef___PlatformServiceImpl_0_c3_xlarge_0);
		ls_DeploymentService = Cons(oDef___DeploymentServiceImpl_0_c3_xlarge_2, ls_DeploymentService);
		[DC: c3_xlarge_3] IQueryService oDef___QueryServiceImpl_0_c3_xlarge_3 = new QueryServiceImpl(oDef___DeploymentServiceImpl_0_c3_xlarge_3, "Customer X");
		ls_IQueryService = Cons(oDef___QueryServiceImpl_0_c3_xlarge_3, ls_IQueryService);
		ls_Service = Cons(oDef___QueryServiceImpl_0_c3_xlarge_3, ls_Service);
		ls_EndPoint = Cons(oDef___QueryServiceImpl_0_c3_xlarge_3, ls_EndPoint);
		[DC: c3_xlarge_2] IQueryService oDef___QueryServiceImpl_0_c3_xlarge_2 = new QueryServiceImpl(oDef___DeploymentServiceImpl_0_c3_xlarge_2, "Customer X");
		ls_IQueryService = Cons(oDef___QueryServiceImpl_0_c3_xlarge_2, ls_IQueryService);
		ls_Service = Cons(oDef___QueryServiceImpl_0_c3_xlarge_2, ls_Service);
		ls_EndPoint = Cons(oDef___QueryServiceImpl_0_c3_xlarge_2, ls_EndPoint);
	}

	Unit undeploy() {
		ls_EndPoint = Nil;
		ls_IQueryService = Nil;
		ls_Service = Nil;
		ls_ServiceProvider = Nil;
		ls_LoadBalancerService = Nil;
		ls_DeploymentService = Nil;
		ls_PlatformService = Nil;
		ls_MonitorPlatformService = Nil;
		ls_InfrastructureService = Nil;
		while ( !isEmpty(ls_DeploymentComponent) ) {
			cloudProvider.killInstance(head(ls_DeploymentComponent));
			ls_DeploymentComponent = tail(ls_DeploymentComponent);
		}
	}
}

class AddQueryDeployer(CloudProvider cloudProvider, DeploymentComponent amazon_us, InfrastructureService infrastructureObj, PlatformService platformObj, LoadBalancerService loadBalancerObj, ServiceProvider serviceProviderObj) implements SmartDeployInterface {

	List<EndPoint> ls_EndPoint = Nil;
	List<IQueryService> ls_IQueryService = Nil;
	List<Service> ls_Service = Nil;
	List<ServiceProvider> ls_ServiceProvider = Nil;
	List<LoadBalancerService> ls_LoadBalancerService = Nil;
	List<DeploymentService> ls_DeploymentService = Nil;
	List<PlatformService> ls_PlatformService = Nil;
	List<MonitorPlatformService> ls_MonitorPlatformService = Nil;
	List<InfrastructureService> ls_InfrastructureService = Nil;
	List<DeploymentComponent> ls_DeploymentComponent = Nil;

	List<EndPoint> getEndPoint() { return ls_EndPoint; }
	List<IQueryService> getIQueryService() { return ls_IQueryService; }
	List<Service> getService() { return ls_Service; }
	List<ServiceProvider> getServiceProvider() { return ls_ServiceProvider; }
	List<LoadBalancerService> getLoadBalancerService() { return ls_LoadBalancerService; }
	List<DeploymentService> getDeploymentService() { return ls_DeploymentService; }
	List<PlatformService> getPlatformService() { return ls_PlatformService; }
	List<MonitorPlatformService> getMonitorPlatformService() { return ls_MonitorPlatformService; }
	List<InfrastructureService> getInfrastructureService() { return ls_InfrastructureService; }
	List<DeploymentComponent> getDeploymentComponent() { return ls_DeploymentComponent; }

	Unit deploy() {
		DeploymentComponent c3_xlarge_1 = cloudProvider.prelaunchInstanceNamed("c3.xlarge");
		ls_DeploymentComponent = Cons(c3_xlarge_1,ls_DeploymentComponent);
		DeploymentComponent c3_xlarge_0 = cloudProvider.prelaunchInstanceNamed("c3.xlarge");
		ls_DeploymentComponent = Cons(c3_xlarge_0,ls_DeploymentComponent);
		DeploymentComponent c3_xlarge_2 = cloudProvider.prelaunchInstanceNamed("c3.xlarge");
		ls_DeploymentComponent = Cons(c3_xlarge_2,ls_DeploymentComponent);
		[DC: amazon_us] InfrastructureService oamazon_scenario___InfrastructureServiceImpl_0____52d7979acf044d2c97581c51e7dc18dc_0 = new InfrastructureServiceImpl();
		ls_InfrastructureService = Cons(oamazon_scenario___InfrastructureServiceImpl_0____52d7979acf044d2c97581c51e7dc18dc_0, ls_InfrastructureService);
		[DC: c3_xlarge_1] DeploymentService oDef___DeploymentServiceImpl_0_c3_xlarge_1 = new DeploymentServiceImpl(infrastructureObj, platformObj);
		ls_DeploymentService = Cons(oDef___DeploymentServiceImpl_0_c3_xlarge_1, ls_DeploymentService);
		[DC: c3_xlarge_2] DeploymentService oDef___DeploymentServiceImpl_0_c3_xlarge_2 = new DeploymentServiceImpl(oamazon_scenario___InfrastructureServiceImpl_0____52d7979acf044d2c97581c51e7dc18dc_0, platformObj);
		ls_DeploymentService = Cons(oDef___DeploymentServiceImpl_0_c3_xlarge_2, ls_DeploymentService);
		[DC: c3_xlarge_0] DeploymentService oDef___DeploymentServiceImpl_0_c3_xlarge_0 = new DeploymentServiceImpl(oamazon_scenario___InfrastructureServiceImpl_0____52d7979acf044d2c97581c51e7dc18dc_0, platformObj);
		ls_DeploymentService = Cons(oDef___DeploymentServiceImpl_0_c3_xlarge_0, ls_DeploymentService);
		[DC: c3_xlarge_1] IQueryService oDef___QueryServiceImpl_0_c3_xlarge_1 = new QueryServiceImpl(oDef___DeploymentServiceImpl_0_c3_xlarge_1, "Customer X");
		ls_IQueryService = Cons(oDef___QueryServiceImpl_0_c3_xlarge_1, ls_IQueryService);
		ls_Service = Cons(oDef___QueryServiceImpl_0_c3_xlarge_1, ls_Service);
		ls_EndPoint = Cons(oDef___QueryServiceImpl_0_c3_xlarge_1, ls_EndPoint);
		[DC: c3_xlarge_0] IQueryService oDef___QueryServiceImpl_0_c3_xlarge_0 = new QueryServiceImpl(oDef___DeploymentServiceImpl_0_c3_xlarge_0, "Customer X");
		ls_IQueryService = Cons(oDef___QueryServiceImpl_0_c3_xlarge_0, ls_IQueryService);
		ls_Service = Cons(oDef___QueryServiceImpl_0_c3_xlarge_0, ls_Service);
		ls_EndPoint = Cons(oDef___QueryServiceImpl_0_c3_xlarge_0, ls_EndPoint);
		[DC: c3_xlarge_2] IQueryService oDef___QueryServiceImpl_0_c3_xlarge_2 = new QueryServiceImpl(oDef___DeploymentServiceImpl_0_c3_xlarge_2, "Customer X");
		ls_IQueryService = Cons(oDef___QueryServiceImpl_0_c3_xlarge_2, ls_IQueryService);
		ls_Service = Cons(oDef___QueryServiceImpl_0_c3_xlarge_2, ls_Service);
		ls_EndPoint = Cons(oDef___QueryServiceImpl_0_c3_xlarge_2, ls_EndPoint);
	}

	Unit undeploy() {
		ls_EndPoint = Nil;
		ls_IQueryService = Nil;
		ls_Service = Nil;
		ls_ServiceProvider = Nil;
		ls_LoadBalancerService = Nil;
		ls_DeploymentService = Nil;
		ls_PlatformService = Nil;
		ls_MonitorPlatformService = Nil;
		ls_InfrastructureService = Nil;
		while ( !isEmpty(ls_DeploymentComponent) ) {
			cloudProvider.killInstance(head(ls_DeploymentComponent));
			ls_DeploymentComponent = tail(ls_DeploymentComponent);
		}
	}
}


/**************************************************************
// Definition of classes with their cost annotations
**************************************************************/

//abstraction for a customer
type Customer = String;

//abstraction for an identifier
type Id = Int;
def Id init() = 1;
def Id incr(Id id) = id + 1;

//abstraction for a request
type Request = Int;
def Int cost(Request request) = request;

//abstraction for a response
type Response = Bool;
def Response success() = True;
def Bool isSuccess(Response response) = response; 

//There exists an enumerated number of service types... 
data ServiceType = FAS | SUGGEST | DM;

// A Service configuration defines 
// * serviceType -- the type of service offered
// * instances -- the amount of resources each instance consumes
data Config = Config(ServiceType serviceType, List<Int> instances); 

// Process state
data State = RUNNING | STOP;

//  Models an infrastructure service that allows one to acquire and release cpu resources
interface InfrastructureService { }

//[Deploy: scenario[Name("amazon_scenario1"), Cost("Cores", 1)] ]
[Deploy: scenario[Name("amazon_scenario"), Cost("amazon_res",1)]]
class InfrastructureServiceImpl implements InfrastructureService {
	// ...
}



// An endpoint is where service user connects to a service
interface EndPoint { }

interface LoadBalancerEndPoint extends EndPoint { }

// A service instance offers a single end point 
// A service has a service type, defining the kind of service offered
// A service belong to a customer
// A service exposes logging information
interface Service extends EndPoint { }

// load balance over n services in round robin style
class LoadBalancerEndPointImpl(List<Service> services) implements LoadBalancerEndPoint {
}

// An interface offered to InfrastructureService to allocate resources
interface ResourceService extends Service { }

class ServiceImpl(Id serviceId, ServiceType st, Customer c, Int cost) implements ResourceService {
	// ...
}

// A deployment service helps to deploy ALL types of service instance onto required cpu resources.
interface DeploymentService { } 


[Deploy: scenario[MaxUse(2),Cost("Cores", 1), Cost("Memory", 80), Param("rp", Req), Param("p",Req)]]
class DeploymentServiceImpl(InfrastructureService rp, PlatformService p) implements DeploymentService {
	// ...
}

// A load balancer service distributes request over service instances
// A load balancer can enable or disable a service
// TODO annotations on interfaces might help to restrict or specifiy 
// requirements such that they should be observed by any object impl.
interface LoadBalancerService { }

//enum to specify whether to increase/decrease load balance resource
data LBOp = INCR | DECR;

[Deploy: scenario[Cost("Cores", 4), Cost("Memory", 8)] ]
//[Deploy: scenario[Name("on_premises"), Cost("on_premises_res",1)]]
class LoadBalancerServiceImpl implements LoadBalancerService {
	// ...
}

//Platform service can create and remove a service
interface PlatformService { }

//Platform service used by monitor to scale up/down a service
interface MonitorPlatformService extends PlatformService { }


[Deploy: scenario[Cost("Cores", 4), Cost("Memory", 12), Param("ls", Req)]]
//[Deploy: scenario[Name("on_premises"), Cost("on_premises_res",1), Param("dsList", List(2)), Param("ls", Req)]]
class PlatformServiceImpl(LoadBalancerService ls) 
implements MonitorPlatformService {
	// ...
}

interface User { }

data Rule = Rule(Int interval, Monitor monitor); 

interface MonitoringService { }

class MonitoringServiceImpl implements MonitoringService {
	// ..
}

interface Monitor { }

interface Action { }

//A monitor that checks the latency of a service endpoint
class LatencyMonitor(Int upper, MonitorPlatformService ps) implements Monitor {
	// ...
}

class ScaleResourceAction(List<Pair<Id, Int>> scalings, MonitorPlatformService ps) implements Action {
	// ...
}


data Scale = UP | DOWN;

//scale up/down the number of instances according to the scaling setting
//scaling setting is a list of pairs of endpoint id to the number of instances to add/remove  
class ScaleInstanceAction(List<Triple<Int, Scale, List<Int>>> scalings, MonitorPlatformService ps) implements Action {
	// ...
}

/**
* Models a cloud service provider such as Fredhopper
**/
interface ServiceProvider { }

[Deploy: scenario[Param("ps", Req), Param("ls", Req)] ]
class ServiceProviderImpl(PlatformService ps, LoadBalancerService ls) implements ServiceProvider {
 // ...
}



/* Example of a service to deploy: query service of the Fredhopper Access Server 
*/
interface Item {
}

interface IQueryService extends Service { }

// Stub implementation of the query service, for use with cost annotations
[Deploy: scenario[MaxUse(1), Cost("Cores", 1), Cost("Memory", 400), Param("c", Default("\\\"Customer X\\\"")), Param("ds", Req)] ]
class QueryServiceImpl(DeploymentService ds, Customer c) implements IQueryService {
	// ....
}


/**************************************************************
// MAIN
**************************************************************/

{

/** Deployment component types that can be used
Pair("c3.xlarge", InsertAssoc(Pair(CostPerInterval,210), InsertAssoc( Pair(Memory,750), InsertAssoc(Pair(Cores,4), EmptyMap))))
Pair("c3.large", InsertAssoc(Pair(CostPerInterval,105), InsertAssoc( Pair(Memory,375), InsertAssoc(Pair(Cores,2), EmptyMap))))
**/


	CloudProvider cloudProvider = new CloudProvider("CloudProvider");
	// Definition of the deployment components
	cloudProvider.setInstanceDescriptions(InsertAssoc(Pair("c3.xlarge", InsertAssoc(Pair(CostPerInterval,210), InsertAssoc( Pair(Memory,750), InsertAssoc(Pair(Cores,4), EmptyMap)))), InsertAssoc( Pair("c3.large", InsertAssoc(Pair(CostPerInterval,105), InsertAssoc( Pair(Memory,375), InsertAssoc(Pair(Cores,2), EmptyMap)))), EmptyMap)));

	DeploymentComponent amazon_eu = new DeploymentComponent("amazon_eu", EmptyMap);
	DeploymentComponent amazon_us = new DeploymentComponent("amazon_us", EmptyMap);


/* JSON ANNOTATION
{
	"id": "MainSmartDeployer",
	"specification": "QueryServiceImpl = 2 and LoadBalancerServiceImpl > 0 and PlatformServiceImpl > 0 and ServiceProviderImpl > 0 and forall ?x in DC: ( ?x.QueryServiceImpl < 2 and ( ?x.QueryServiceImpl = 1 impl ?x.DeploymentServiceImpl > 0) and (?x.ServiceProviderImpl > 0 impl ?x.PlatformServiceImpl > 0) and ( ?x.ServiceProviderImpl > 0 impl  (sum ?y in obj:  ?x.?y) = ?x.ServiceProviderImpl + ?x.PlatformServiceImpl) and (?x.LoadBalancerServiceImpl > 0 impl (sum ?y in obj: ?x.?y) = ?x.LoadBalancerServiceImpl) and (?x.InfrastructureServiceImpl[amazon_scenario] > 0 impl  (sum ?y in obj: ?x.?y) = ?x.InfrastructureServiceImpl[amazon_scenario]))",
	"DC": [{
		"name": "amazon_eu",
		"amazon_res": 10
	}],
	"obj": []
}
**/
	

	[ SmartDeploy : "{\"id\":\"MainSmartDeployer\",\"specification\":\"QueryServiceImpl = 2 and LoadBalancerServiceImpl > 0 and PlatformServiceImpl > 0 and ServiceProviderImpl > 0 and forall ?x in DC: ( ?x.QueryServiceImpl < 2 and ( ?x.QueryServiceImpl = 1 impl ?x.DeploymentServiceImpl > 0) and (?x.ServiceProviderImpl > 0 impl ?x.PlatformServiceImpl > 0) and ( ?x.ServiceProviderImpl > 0 impl  (sum ?y in obj:  ?x.?y) = ?x.ServiceProviderImpl + ?x.PlatformServiceImpl) and (?x.LoadBalancerServiceImpl > 0 impl (sum ?y in obj: ?x.?y) = ?x.LoadBalancerServiceImpl) and (?x.InfrastructureServiceImpl[amazon_scenario] > 0 impl  (sum ?y in obj: ?x.?y) = ?x.InfrastructureServiceImpl[amazon_scenario]))\",\"DC\":[{\"name\":\"amazon_eu\",\"amazon_res\":10}],\"obj\":[]}" ]
	SmartDeployInterface c1 = new MainSmartDeployer(cloudProvider,amazon_eu);
	c1.deploy();

	List<InfrastructureService> infrastructureServices = c1.getInfrastructureService();
	List<PlatformService> platformServices = c1.getPlatformService();
	List<LoadBalancerService> loadBalancerServices = c1.getLoadBalancerService();
	List<ServiceProvider> serviceProviders  = c1.getServiceProvider();


/** JSON ANNOTATION
{
  "id": "AddQueryDeployer",
  "specification": "QueryServiceImpl = 3 and forall ?x in DC: ( ?x.QueryServiceImpl < 2 and ( ?x.QueryServiceImpl = 1 impl ?x.DeploymentServiceImpl > 0) and (?x.ServiceProviderImpl > 0 impl ?x.PlatformServiceImpl > 0) and ( ?x.ServiceProviderImpl > 0 impl  (sum ?y in obj:  ?x.?y) = ?x.ServiceProviderImpl + ?x.PlatformServiceImpl) and (?x.LoadBalancerServiceImpl > 0 impl (sum ?y in obj: ?x.?y) = ?x.LoadBalancerServiceImpl) and (?x.InfrastructureServiceImpl[amazon_scenario] > 0 impl  (sum ?y in obj: ?x.?y) = ?x.InfrastructureServiceImpl[amazon_scenario]))",
  "DC": [
    {
      "name": "amazon_us",
      "amazon_res": 10
    }
  ],
  "obj": [
    {
      "name": "infrastructureObj",
      "provides": [
        {
          "ports": [
            "InfrastructureService"
          ],
          "num": 1
        }
      ],
      "interface": "InfrastructureService"
    },
    {
      "name": "platformObj",
      "provides": [
        {
          "ports": [
            "MonitorPlatformService",
            "PlatformService"
          ],
          "num": -1
        }
      ],
      "interface": "PlatformService"
    },
    {
      "name": "loadBalancerObj",
      "provides": [
        {
          "ports": [
            "LoadBalancerService"
          ],
          "num": -1
        }
      ],
      "interface": "LoadBalancerService"
    },
    {
      "name": "serviceProviderObj",
      "provides": [
        {
          "ports": [
            "ServiceProvider"
          ],
          "num": -1
        }
      ],
      "interface": "ServiceProvider"
    }
  ]
}
**/


	[ SmartDeploy : "{\"id\":\"AddQueryDeployer\",\"specification\":\"QueryServiceImpl = 3 and forall ?x in DC: ( ?x.QueryServiceImpl < 2 and ( ?x.QueryServiceImpl = 1 impl ?x.DeploymentServiceImpl > 0) and (?x.ServiceProviderImpl > 0 impl ?x.PlatformServiceImpl > 0) and ( ?x.ServiceProviderImpl > 0 impl  (sum ?y in obj:  ?x.?y) = ?x.ServiceProviderImpl + ?x.PlatformServiceImpl) and (?x.LoadBalancerServiceImpl > 0 impl (sum ?y in obj: ?x.?y) = ?x.LoadBalancerServiceImpl) and (?x.InfrastructureServiceImpl[amazon_scenario] > 0 impl  (sum ?y in obj: ?x.?y) = ?x.InfrastructureServiceImpl[amazon_scenario]))\",\"DC\":[{\"name\":\"amazon_us\",\"amazon_res\":10}],\"obj\":[{\"name\":\"infrastructureObj\",\"provides\":[{\"ports\":[\"InfrastructureService\"],\"num\":1}],\"interface\":\"InfrastructureService\"},{\"name\":\"platformObj\",\"provides\":[{\"ports\":[\"MonitorPlatformService\",\"PlatformService\"],\"num\":-1}],\"interface\":\"PlatformService\"},{\"name\":\"loadBalancerObj\",\"provides\":[{\"ports\":[\"LoadBalancerService\"],\"num\":-1}],\"interface\":\"LoadBalancerService\"},{\"name\":\"serviceProviderObj\",\"provides\":[{\"ports\":[\"ServiceProvider\"],\"num\":-1}],\"interface\":\"ServiceProvider\"}]}" ]
	SmartDeployInterface c2 = new AddQueryDeployer(cloudProvider,amazon_us,head(infrastructureServices),head(platformServices),head(loadBalancerServices),head(serviceProviders));
	c2.deploy();


}

	
