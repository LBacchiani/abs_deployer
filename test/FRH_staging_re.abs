module FredhopperCloudServices;

/**************************************************************
Mandatory imports and exports
**************************************************************/
export *;
import * from ABS.DC;
import * from ABS.SmartDeploy;



/**************************************************************
// Definition of classes with their cost annotations
**************************************************************/

//abstraction for a customer
type Customer = String;

//abstraction for an identifier
type Id = Int;
def Id init() = 1;
def Id incr(Id id) = id + 1;

//abstraction for a request
type Request = Int;
def Int cost(Request request) = request;

//abstraction for a response
type Response = Bool;
def Response success() = True;
def Bool isSuccess(Response response) = response; 

//There exists an enumerated number of service types... 
data ServiceType = FAS | SUGGEST | DM;

// A Service configuration defines 
// * serviceType -- the type of service offered
// * instances -- the amount of resources each instance consumes
data Config = Config(ServiceType serviceType, List<Int> instances); 

// Process state
data State = RUNNING | STOP;

// An endpoint is where service user connects to a service
interface EndPoint { }

interface LoadBalancerEndPoint extends EndPoint { }

// A service instance offers a single end point 
// A service has a service type, defining the kind of service offered
// A service belong to a customer
// A service exposes logging information
interface Service extends EndPoint { }

// load balance over n services in round robin style
[Deploy: scenario[Cost("Cores", 2), Cost("Memory", 100),Param("services", List(0))]]
class LoadBalancerEndPointImpl(List<Service> services) implements LoadBalancerEndPoint {
}


// A deployment service helps to deploy ALL types of service instance onto required cpu resources.
interface DeploymentService { } 


[Deploy: scenario[Cost("Cores", 1), Cost("Memory", 80), Param("p",Req)]]
class DeploymentServiceImpl(PlatformService p) implements DeploymentService {
	// ...
}

// A load balancer service distributes request over service instances
// A load balancer can enable or disable a service
// TODO annotations on interfaces might help to restrict or specifiy 
// requirements such that they should be observed by any object impl.
interface LoadBalancerService { 
	Unit add(LoadBalancerEndPoint endpoint);
}

//enum to specify whether to increase/decrease load balance resource
data LBOp = INCR | DECR;

//[Deploy: scenario[Cost("Cores", 4), Cost("Memory", 800),Param("ls", List(0))] ]
//class LoadBalancerServiceImpl(List<LoadBalancerEndPoint> ls) implements LoadBalancerService  {
[Deploy: scenario[Cost("Cores", 4), Cost("Memory", 800),Param("LoadBalancerEndPoint", OptList("add"))] ]
class LoadBalancerServiceImpl implements LoadBalancerService  {
	Unit add(LoadBalancerEndPoint endpoint) {}
	// ...
}

//Platform service can create and remove a service
interface PlatformService {
    Unit addLoadBalancer(LoadBalancerService loadbalancer);
}

//Platform service used by monitor to scale up/down a service
interface MonitorPlatformService extends PlatformService { }


[Deploy: scenario[Cost("Cores", 4), Cost("Memory", 1200), Param("ls", Req)]]
class PlatformServiceImpl(LoadBalancerService ls) 
implements MonitorPlatformService {

    Unit addLoadBalancer(LoadBalancerService loadbalancer) {}
	// ...
}

interface User { }

data Rule = Rule(Int interval, Monitor monitor); 

interface MonitoringService { }

class MonitoringServiceImpl implements MonitoringService {
	// ..
}

interface Monitor { }

interface Action { }

//A monitor that checks the latency of a service endpoint
class LatencyMonitor(Int upper, MonitorPlatformService ps) implements Monitor {
	// ...
}

class ScaleResourceAction(List<Pair<Id, Int>> scalings, MonitorPlatformService ps) implements Action {
	// ...
}


data Scale = UP | DOWN;

//scale up/down the number of instances according to the scaling setting
//scaling setting is a list of pairs of endpoint id to the number of instances to add/remove  
class ScaleInstanceAction(List<Triple<Int, Scale, List<Int>>> scalings, MonitorPlatformService ps) implements Action {
	// ...
}

/**
* Models a cloud service provider such as Fredhopper
**/
interface ServiceProvider { }

[Deploy: scenario[Param("ps", Req), Param("ls", Req)] ]
class ServiceProviderImpl(PlatformService ps, LoadBalancerService ls) implements ServiceProvider {
 // ...
}



/* Example of a service to deploy: query service of the Fredhopper Access Server 
*/
interface Item {
}

interface IQueryService extends Service { }

// Stub implementation of the query service, for use with cost annotations
[Deploy: scenario[Name("staging"), Cost("Cores", 2), Cost("Memory", 700), Param("c", Default("\\\"Customer X\\\"")), Param("staging", Default("True")), Param("ds", Req)] ]
[Deploy: scenario[Name("live"), Cost("Cores", 1), Cost("Memory", 300), Param("c", Default("\\\"Customer X\\\"")), Param("staging", Default("False")), Param("ds", Req)] ]
class QueryServiceImpl(DeploymentService ds, Customer c, Bool staging) implements IQueryService {
	// ....
}


data ScaleDecision = ScaleUp | ScaleDown | DoNothing;
interface ScalingMonitor {
	ScaleDecision scale();
}

class ScalingMonitor() implements ScalingMonitor {
	ScaleDecision scale() { return ScaleUp; }
}



/**************************************************************
// MAIN
**************************************************************/

{

	CloudProvider cloudProvider = new CloudProvider("CloudProvider");
	// Definition of the deployment components
	cloudProvider.addInstanceDescription(Pair("c3_xlarge_eu", InsertAssoc(Pair(CostPerInterval,210), InsertAssoc( Pair(Memory,750), InsertAssoc(Pair(Cores,4), EmptyMap)))));
	cloudProvider.addInstanceDescription(Pair("c3_xlarge_us", InsertAssoc(Pair(CostPerInterval,210), InsertAssoc( Pair(Memory,750), InsertAssoc(Pair(Cores,4), EmptyMap)))));
	cloudProvider.addInstanceDescription(Pair("c3_2xlarge_eu", InsertAssoc(Pair(CostPerInterval,420), InsertAssoc( Pair(Memory,1500), InsertAssoc(Pair(Cores,8), EmptyMap)))));
	cloudProvider.addInstanceDescription(Pair("c3_2xlarge_us", InsertAssoc(Pair(CostPerInterval,420), InsertAssoc( Pair(Memory,1500), InsertAssoc(Pair(Cores,8), EmptyMap)))));


/* JSON ANNOTATION
{
	"id": "MainSmartDeployer",
	"specification": "(sum ?x in '.*_eu': ?x.QueryServiceImpl['staging']) > 0 and (sum ?x in '.*_us': ?x.QueryServiceImpl['staging']) > 0 and QueryServiceImpl['.*'] = 4 and (sum ?x in '.*_eu': ?x.LoadBalancerServiceImpl) = 1 and (sum ?x in '.*_us': ?x.LoadBalancerServiceImpl) = 1 and (sum ?x in '.*_eu': ?x.LoadBalancerEndPointImpl) = 2 and (sum ?x in '.*_us': ?x.LoadBalancerEndPointImpl) = 1 and (forall ?x in DC: ( ?x.QueryServiceImpl['.*'] < 2 and ( ?x.QueryServiceImpl['.*'] = 1 impl ?x.DeploymentServiceImpl > 0) and ( ?x.ServiceProviderImpl > 0 impl  (sum ?y in obj:  ?x.?y) = ?x.ServiceProviderImpl + ?x.PlatformServiceImpl) and (?x.LoadBalancerServiceImpl > 0 impl (sum ?y in obj: ?x.?y) = 1) and (?x.LoadBalancerEndPointImpl > 0 impl (sum ?y in obj: ?x.?y) = 1) )) and abs((sum ?x in '.*_eu': ?x.QueryServiceImpl['.*']) - (sum ?x in '.*_us': ?x.QueryServiceImpl['.*']) ) < 2 and (((sum ?x in '.*_us': ?x.QueryServiceImpl['staging']) > 0) impl (sum ?x in '.*_us': ?x.PlatformServiceImpl) > 0) and (((sum ?x in '.*_eu': ?x.QueryServiceImpl['staging']) > 0) impl (sum ?x in '.*_eu': ?x.PlatformServiceImpl) > 0)",
	"DC": [],
	"obj": [],
	"cloud_provider_DC_availability" : { "c3_2xlarge_eu" : 3, "c3_2xlarge_us" : 3},
	"bind preferences" : [
	    "local",
			"sum ?x of type QueryServiceImpl['.*'] in '.*_eu' :  forall ?y of type LoadBalancerEndPointImpl in '.*_eu' : ?x used by ?y",
			"sum ?x of type QueryServiceImpl['.*'] in '.*_us' :  forall ?y of type LoadBalancerEndPointImpl in '.*_us' : ?x used by ?y",
			"sum ?x of type LoadBalancerEndPointImpl in '.*_eu' :  exists ?y of type LoadBalancerServiceImpl in '.*_eu' : ?x used by ?y",
			"sum ?x of type LoadBalancerEndPointImpl in '.*_us' :  exists ?y of type LoadBalancerServiceImpl in '.*_us' : ?x used by ?y",
	    "sum ?x of type DeploymentServiceImpl in '.*_eu' :  exists ?y of type PlatformServiceImpl in '.*_eu' : ?y used by ?x",
			"sum ?x of type DeploymentServiceImpl in '.*_us' :  exists ?y of type PlatformServiceImpl in '.*_us' : ?y used by ?x",
			"forall ?x of type LoadBalancerServiceImpl in '.*_eu' : forall ?y of type PlatformServiceImpl in '.*_eu' : ?x used by ?y",
			"forall ?x of type LoadBalancerServiceImpl in '.*_us' : forall ?y of type PlatformServiceImpl in '.*_us' : ?x used by ?y"
	    ]
}
**/


	[ SmartDeploy : "{\"id\":\"MainSmartDeployer\",\"specification\":\"(sum ?x in '.*_eu': ?x.QueryServiceImpl['staging']) > 0 and (sum ?x in '.*_us': ?x.QueryServiceImpl['staging']) > 0 and QueryServiceImpl['.*'] = 4 and (sum ?x in '.*_eu': ?x.LoadBalancerServiceImpl) = 1 and (sum ?x in '.*_us': ?x.LoadBalancerServiceImpl) = 1 and (sum ?x in '.*_eu': ?x.LoadBalancerEndPointImpl) = 2 and (sum ?x in '.*_us': ?x.LoadBalancerEndPointImpl) = 1 and (forall ?x in DC: ( ?x.QueryServiceImpl['.*'] < 2 and ( ?x.QueryServiceImpl['.*'] = 1 impl ?x.DeploymentServiceImpl > 0) and ( ?x.ServiceProviderImpl > 0 impl  (sum ?y in obj:  ?x.?y) = ?x.ServiceProviderImpl + ?x.PlatformServiceImpl) and (?x.LoadBalancerServiceImpl > 0 impl (sum ?y in obj: ?x.?y) = 1) and (?x.LoadBalancerEndPointImpl > 0 impl (sum ?y in obj: ?x.?y) = 1) )) and abs((sum ?x in '.*_eu': ?x.QueryServiceImpl['.*']) - (sum ?x in '.*_us': ?x.QueryServiceImpl['.*']) ) < 2 and (((sum ?x in '.*_us': ?x.QueryServiceImpl['staging']) > 0) impl (sum ?x in '.*_us': ?x.PlatformServiceImpl) > 0) and (((sum ?x in '.*_eu': ?x.QueryServiceImpl['staging']) > 0) impl (sum ?x in '.*_eu': ?x.PlatformServiceImpl) > 0)\",\"DC\":[],\"obj\":[],\"cloud_provider_DC_availability\":{\"c3_2xlarge_eu\":3,\"c3_2xlarge_us\":3},\"bind preferences\":[\"local\",\"sum ?x of type QueryServiceImpl['.*'] in '.*_eu' :  forall ?y of type LoadBalancerEndPointImpl in '.*_eu' : ?x used by ?y\",\"sum ?x of type QueryServiceImpl['.*'] in '.*_us' :  forall ?y of type LoadBalancerEndPointImpl in '.*_us' : ?x used by ?y\",\"sum ?x of type LoadBalancerEndPointImpl in '.*_eu' :  exists ?y of type LoadBalancerServiceImpl in '.*_eu' : ?x used by ?y\",\"sum ?x of type LoadBalancerEndPointImpl in '.*_us' :  exists ?y of type LoadBalancerServiceImpl in '.*_us' : ?x used by ?y\",\"sum ?x of type DeploymentServiceImpl in '.*_eu' :  exists ?y of type PlatformServiceImpl in '.*_eu' : ?y used by ?x\",\"sum ?x of type DeploymentServiceImpl in '.*_us' :  exists ?y of type PlatformServiceImpl in '.*_us' : ?y used by ?x\",\"forall ?x of type LoadBalancerServiceImpl in '.*_eu' : forall ?y of type PlatformServiceImpl in '.*_eu' : ?x used by ?y\",\"forall ?x of type LoadBalancerServiceImpl in '.*_us' : forall ?y of type PlatformServiceImpl in '.*_us' : ?x used by ?y\"]}" ]
	SmartDeployInterface c1 = new MainSmartDeployer(cloudProvider);
	c1.deploy();

	List<Pair<PlatformService,DeploymentComponent>> platformServices = c1.getPlatformService();
	List<Pair<LoadBalancerService,DeploymentComponent>> loadBalancerServices = c1.getLoadBalancerService();
	List<Pair<ServiceProvider,DeploymentComponent>> serviceProviders  = c1.getServiceProvider();

	
/** JSON ANNOTATION
{  
  "id":"AddQueryDeployer",
  "specification":"QueryServiceImpl['live'] = 4 and (sum ?x in '.*_eu': ?x.LoadBalancerServiceImpl) = 1 and (sum ?x in '.*_us': ?x.LoadBalancerServiceImpl) = 1 and (forall ?x in DC: ( ?x.QueryServiceImpl['.*'] < 2 and ( ?x.QueryServiceImpl['.*'] = 1 impl ?x.DeploymentServiceImpl > 0) and (?x.ServiceProviderImpl > 0 impl ?x.PlatformServiceImpl > 0) and ( ?x.ServiceProviderImpl > 0 impl  (sum ?y in obj:  ?x.?y) = ?x.ServiceProviderImpl + ?x.PlatformServiceImpl) and (?x.LoadBalancerServiceImpl > 0 impl (sum ?y in obj: ?x.?y) = ?x.LoadBalancerServiceImpl))) and abs((sum ?x in '.*_eu': ?x.QueryServiceImpl['.*']) - (sum ?x in '.*_us': ?x.QueryServiceImpl['.*']) ) < 2 and (((sum ?x in '.*_us': ?x.QueryServiceImpl['staging']) > 0) impl (sum ?x in '.*_us': ?x.PlatformServiceImpl) > 0) and (((sum ?x in '.*_eu': ?x.QueryServiceImpl['staging']) > 0) impl (sum ?x in '.*_eu': ?x.PlatformServiceImpl) > 0)",
  "DC":[  

  ],
  "obj":[  
    {  
      "name":"platformObjUs",
      "provides":[  
        {  
          "ports":[  
            "MonitorPlatformService",
            "PlatformService"
          ],
          "num":-1
        }
      ],
      "may_add_reference_to":[  
        {  
          "interface":"LoadBalancerService",
          "method":"addLoadBalancer",
          "DC_as_additional_parameter":true
        }
      ],
      "interface":"PlatformService"
    },
    {  
      "name":"platformObjEu",
      "provides":[  
        {  
          "ports":[  
            "MonitorPlatformService",
            "PlatformService"
          ],
          "num":-1
        }
      ],
      "may_add_reference_to":[  
        {  
          "interface":"LoadBalancerService",
          "method":"addLoadBalancer",
          "DC_as_additional_parameter":true
        }
      ],
      "interface":"PlatformService"
    },
    {  
      "name":"loadBalancerObjEu",
      "provides":[  
        {  
          "ports":[  
            "LoadBalancerService"
          ],
          "num":-1
        }
      ],
      "interface":"LoadBalancerService"
    },
    {  
      "name":"loadBalancerObjUs",
      "provides":[  
        {  
          "ports":[  
            "LoadBalancerService"
          ],
          "num":-1
        }
      ],
      "interface":"LoadBalancerService"
    },
    {  
      "name":"serviceProviderObj",
      "provides":[  
        {  
          "ports":[  
            "ServiceProvider"
          ],
          "num":-1
        }
      ],
      "interface":"ServiceProvider"
    }
  ],
  "bind preferences":[  
    "local",
    "sum ?x of type DeploymentServiceImpl in '.*_eu' :  exists ?y of type platformObjEu in DC : ?y used by ?x",
    "sum ?x of type DeploymentServiceImpl in '.*_us' :  exists ?y of type platformObjUs in DC : ?y used by ?x",
    "forall ?x of type LoadBalancerServiceImpl in '.*_eu' : exists ?y of type platformObjEu in DC : ?x used by ?y",
    "forall ?x of type LoadBalancerServiceImpl in '.*_us' : exists ?y of type platformObjUs in DC : ?x used by ?y"
  ]
}
**/

/**

	[ SmartDeploy : "{\"id\":\"AddQueryDeployer\",\"specification\":\"QueryServiceImpl['live'] = 4 and (sum ?x in '.*_eu': ?x.LoadBalancerServiceImpl) = 1 and (sum ?x in '.*_us': ?x.LoadBalancerServiceImpl) = 1 and (forall ?x in DC: ( ?x.QueryServiceImpl['.*'] < 2 and ( ?x.QueryServiceImpl['.*'] = 1 impl ?x.DeploymentServiceImpl > 0) and (?x.ServiceProviderImpl > 0 impl ?x.PlatformServiceImpl > 0) and ( ?x.ServiceProviderImpl > 0 impl  (sum ?y in obj:  ?x.?y) = ?x.ServiceProviderImpl + ?x.PlatformServiceImpl) and (?x.LoadBalancerServiceImpl > 0 impl (sum ?y in obj: ?x.?y) = ?x.LoadBalancerServiceImpl))) and abs((sum ?x in '.*_eu': ?x.QueryServiceImpl['.*']) - (sum ?x in '.*_us': ?x.QueryServiceImpl['.*']) ) < 2 and (((sum ?x in '.*_us': ?x.QueryServiceImpl['staging']) > 0) impl (sum ?x in '.*_us': ?x.PlatformServiceImpl) > 0) and (((sum ?x in '.*_eu': ?x.QueryServiceImpl['staging']) > 0) impl (sum ?x in '.*_eu': ?x.PlatformServiceImpl) > 0)\",\"DC\":[],\"obj\":[{\"name\":\"platformObjUs\",\"provides\":[{\"ports\":[\"MonitorPlatformService\",\"PlatformService\"],\"num\":-1}],\"may_add_reference_to\":[{\"interface\":\"LoadBalancerService\",\"method\":\"addLoadBalancer\",\"DC_as_additional_parameter\":true}],\"interface\":\"PlatformService\"},{\"name\":\"platformObjEu\",\"provides\":[{\"ports\":[\"MonitorPlatformService\",\"PlatformService\"],\"num\":-1}],\"may_add_reference_to\":[{\"interface\":\"LoadBalancerService\",\"method\":\"addLoadBalancer\",\"DC_as_additional_parameter\":true}],\"interface\":\"PlatformService\"},{\"name\":\"loadBalancerObjEu\",\"provides\":[{\"ports\":[\"LoadBalancerService\"],\"num\":-1}],\"interface\":\"LoadBalancerService\"},{\"name\":\"loadBalancerObjUs\",\"provides\":[{\"ports\":[\"LoadBalancerService\"],\"num\":-1}],\"interface\":\"LoadBalancerService\"},{\"name\":\"serviceProviderObj\",\"provides\":[{\"ports\":[\"ServiceProvider\"],\"num\":-1}],\"interface\":\"ServiceProvider\"}],\"bind preferences\":[\"local\",\"sum ?x of type DeploymentServiceImpl in '.*_eu' :  exists ?y of type platformObjEu in DC : ?y used by ?x\",\"sum ?x of type DeploymentServiceImpl in '.*_us' :  exists ?y of type platformObjUs in DC : ?y used by ?x\",\"forall ?x of type LoadBalancerServiceImpl in '.*_eu' : exists ?y of type platformObjEu in DC : ?x used by ?y\",\"forall ?x of type LoadBalancerServiceImpl in '.*_us' : exists ?y of type platformObjUs in DC : ?x used by ?y\"]}" ]



Check with Rudy new DC API
	List<SmartDeployInterface> depl_list = Nil;
	ScalingMonitor m = new ScalingMonitor();
	while (True) {
		ScaleDecision scale_decision =
			m.scale();
		if (scale_decision == ScaleUp) {
			SmartDeployInterface c2 = new AddQueryDeployer(cloudProvider,head(platformServices),head(loadBalancerServices),head(serviceProviders));
			c2.deploy();
			depl_list = Cons(c2,depl_list);
		} else if ((scale_decision == ScaleDown) && (depl_list != Nil)) {
			SmartDeployInterface c2 = head(depl_list);
			depl_list = tail(depl_list);
			c2.undeploy();
		}
	}
**/


	print("FRH model simulation terminated\n");

}

	
