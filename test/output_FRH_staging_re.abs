module Delta8c97d900a4204fd689beedb786115493;
import * from ABS.DC;
import * from FredhopperCloudServices;

delta SmartDeployDelta;
uses ABS.SmartDeploy;
adds import * from FredhopperCloudServices;
adds import * from ABS.DC;
modifies interface SmartDeployInterface {
	adds List<EndPoint> getEndPoint();
	adds List<IQueryService> getIQueryService();
	adds List<Service> getService();
	adds List<ServiceProvider> getServiceProvider();
	adds List<LoadBalancerService> getLoadBalancerService();
	adds List<DeploymentService> getDeploymentService();
	adds List<PlatformService> getPlatformService();
	adds List<MonitorPlatformService> getMonitorPlatformService();
	adds List<DeploymentComponent> getDeploymentComponent();
	adds Unit deploy();
	adds Unit undeploy();
}
adds class MainSmartDeployer(CloudProvider cloudProvider) implements SmartDeployInterface {

	List<EndPoint> ls_EndPoint = Nil;
	List<IQueryService> ls_IQueryService = Nil;
	List<Service> ls_Service = Nil;
	List<ServiceProvider> ls_ServiceProvider = Nil;
	List<LoadBalancerService> ls_LoadBalancerService = Nil;
	List<DeploymentService> ls_DeploymentService = Nil;
	List<PlatformService> ls_PlatformService = Nil;
	List<MonitorPlatformService> ls_MonitorPlatformService = Nil;
	List<DeploymentComponent> ls_DeploymentComponent = Nil;

	List<EndPoint> getEndPoint() { return ls_EndPoint; }
	List<IQueryService> getIQueryService() { return ls_IQueryService; }
	List<Service> getService() { return ls_Service; }
	List<ServiceProvider> getServiceProvider() { return ls_ServiceProvider; }
	List<LoadBalancerService> getLoadBalancerService() { return ls_LoadBalancerService; }
	List<DeploymentService> getDeploymentService() { return ls_DeploymentService; }
	List<PlatformService> getPlatformService() { return ls_PlatformService; }
	List<MonitorPlatformService> getMonitorPlatformService() { return ls_MonitorPlatformService; }
	List<DeploymentComponent> getDeploymentComponent() { return ls_DeploymentComponent; }

	Unit deploy() {
		DeploymentComponent c3_2xlarge_eu_1 = cloudProvider.prelaunchInstanceNamed("c3_2xlarge_eu");
		ls_DeploymentComponent = Cons(c3_2xlarge_eu_1,ls_DeploymentComponent);
		DeploymentComponent c3_xlarge_eu_1 = cloudProvider.prelaunchInstanceNamed("c3_xlarge_eu");
		ls_DeploymentComponent = Cons(c3_xlarge_eu_1,ls_DeploymentComponent);
		DeploymentComponent c3_2xlarge_us_1 = cloudProvider.prelaunchInstanceNamed("c3_2xlarge_us");
		ls_DeploymentComponent = Cons(c3_2xlarge_us_1,ls_DeploymentComponent);
		DeploymentComponent c3_2xlarge_us_0 = cloudProvider.prelaunchInstanceNamed("c3_2xlarge_us");
		ls_DeploymentComponent = Cons(c3_2xlarge_us_0,ls_DeploymentComponent);
		[DC: c3_2xlarge_eu_1] LoadBalancerService oDef___LoadBalancerServiceImpl_0_c3_2xlarge_eu_1 = new LoadBalancerServiceImpl();
		ls_LoadBalancerService = Cons(oDef___LoadBalancerServiceImpl_0_c3_2xlarge_eu_1, ls_LoadBalancerService);
		[DC: c3_2xlarge_us_1] MonitorPlatformService oDef___PlatformServiceImpl_0_c3_2xlarge_us_1 = new PlatformServiceImpl(oDef___LoadBalancerServiceImpl_0_c3_2xlarge_eu_1);
		ls_MonitorPlatformService = Cons(oDef___PlatformServiceImpl_0_c3_2xlarge_us_1, ls_MonitorPlatformService);
		ls_PlatformService = Cons(oDef___PlatformServiceImpl_0_c3_2xlarge_us_1, ls_PlatformService);
		[DC: c3_xlarge_eu_1] DeploymentService oDef___DeploymentServiceImpl_0_c3_xlarge_eu_1 = new DeploymentServiceImpl(oDef___PlatformServiceImpl_0_c3_2xlarge_us_1);
		ls_DeploymentService = Cons(oDef___DeploymentServiceImpl_0_c3_xlarge_eu_1, ls_DeploymentService);
		[DC: c3_2xlarge_us_0] DeploymentService oDef___DeploymentServiceImpl_0_c3_2xlarge_us_0 = new DeploymentServiceImpl(oDef___PlatformServiceImpl_0_c3_2xlarge_us_1);
		ls_DeploymentService = Cons(oDef___DeploymentServiceImpl_0_c3_2xlarge_us_0, ls_DeploymentService);
		[DC: c3_2xlarge_us_1] ServiceProvider oDef___ServiceProviderImpl_0_c3_2xlarge_us_1 = new ServiceProviderImpl(oDef___PlatformServiceImpl_0_c3_2xlarge_us_1, oDef___LoadBalancerServiceImpl_0_c3_2xlarge_eu_1);
		ls_ServiceProvider = Cons(oDef___ServiceProviderImpl_0_c3_2xlarge_us_1, ls_ServiceProvider);
		[DC: c3_2xlarge_us_0] IQueryService ostaging___QueryServiceImpl_0_c3_2xlarge_us_0 = new QueryServiceImpl(oDef___DeploymentServiceImpl_0_c3_2xlarge_us_0, "Customer X", True);
		ls_IQueryService = Cons(ostaging___QueryServiceImpl_0_c3_2xlarge_us_0, ls_IQueryService);
		ls_Service = Cons(ostaging___QueryServiceImpl_0_c3_2xlarge_us_0, ls_Service);
		ls_EndPoint = Cons(ostaging___QueryServiceImpl_0_c3_2xlarge_us_0, ls_EndPoint);
		[DC: c3_xlarge_eu_1] IQueryService olive___QueryServiceImpl_0_c3_xlarge_eu_1 = new QueryServiceImpl(oDef___DeploymentServiceImpl_0_c3_xlarge_eu_1, "Customer X", False);
		ls_IQueryService = Cons(olive___QueryServiceImpl_0_c3_xlarge_eu_1, ls_IQueryService);
		ls_Service = Cons(olive___QueryServiceImpl_0_c3_xlarge_eu_1, ls_Service);
		ls_EndPoint = Cons(olive___QueryServiceImpl_0_c3_xlarge_eu_1, ls_EndPoint);
	}

	Unit undeploy() {
		ls_EndPoint = Nil;
		ls_IQueryService = Nil;
		ls_Service = Nil;
		ls_ServiceProvider = Nil;
		ls_LoadBalancerService = Nil;
		ls_DeploymentService = Nil;
		ls_PlatformService = Nil;
		ls_MonitorPlatformService = Nil;
		while ( !isEmpty(ls_DeploymentComponent) ) {
			cloudProvider.shutdownInstance(head(ls_DeploymentComponent));
			ls_DeploymentComponent = tail(ls_DeploymentComponent);
		}
	}
}
adds class AddQueryDeployer(CloudProvider cloudProvider, PlatformService platformObj, LoadBalancerService loadBalancerObj, ServiceProvider serviceProviderObj) implements SmartDeployInterface {

	List<EndPoint> ls_EndPoint = Nil;
	List<IQueryService> ls_IQueryService = Nil;
	List<Service> ls_Service = Nil;
	List<ServiceProvider> ls_ServiceProvider = Nil;
	List<LoadBalancerService> ls_LoadBalancerService = Nil;
	List<DeploymentService> ls_DeploymentService = Nil;
	List<PlatformService> ls_PlatformService = Nil;
	List<MonitorPlatformService> ls_MonitorPlatformService = Nil;
	List<DeploymentComponent> ls_DeploymentComponent = Nil;

	List<EndPoint> getEndPoint() { return ls_EndPoint; }
	List<IQueryService> getIQueryService() { return ls_IQueryService; }
	List<Service> getService() { return ls_Service; }
	List<ServiceProvider> getServiceProvider() { return ls_ServiceProvider; }
	List<LoadBalancerService> getLoadBalancerService() { return ls_LoadBalancerService; }
	List<DeploymentService> getDeploymentService() { return ls_DeploymentService; }
	List<PlatformService> getPlatformService() { return ls_PlatformService; }
	List<MonitorPlatformService> getMonitorPlatformService() { return ls_MonitorPlatformService; }
	List<DeploymentComponent> getDeploymentComponent() { return ls_DeploymentComponent; }

	Unit deploy() {
		DeploymentComponent c3_xlarge_eu_0 = cloudProvider.prelaunchInstanceNamed("c3_xlarge_eu");
		ls_DeploymentComponent = Cons(c3_xlarge_eu_0,ls_DeploymentComponent);
		DeploymentComponent c3_xlarge_us_0 = cloudProvider.prelaunchInstanceNamed("c3_xlarge_us");
		ls_DeploymentComponent = Cons(c3_xlarge_us_0,ls_DeploymentComponent);
		[DC: c3_xlarge_us_0] DeploymentService oDef___DeploymentServiceImpl_0_c3_xlarge_us_0 = new DeploymentServiceImpl(platformObj);
		ls_DeploymentService = Cons(oDef___DeploymentServiceImpl_0_c3_xlarge_us_0, ls_DeploymentService);
		[DC: c3_xlarge_eu_0] DeploymentService oDef___DeploymentServiceImpl_0_c3_xlarge_eu_0 = new DeploymentServiceImpl(platformObj);
		ls_DeploymentService = Cons(oDef___DeploymentServiceImpl_0_c3_xlarge_eu_0, ls_DeploymentService);
		[DC: c3_xlarge_eu_0] IQueryService olive___QueryServiceImpl_0_c3_xlarge_eu_0 = new QueryServiceImpl(oDef___DeploymentServiceImpl_0_c3_xlarge_eu_0, "Customer X", False);
		ls_IQueryService = Cons(olive___QueryServiceImpl_0_c3_xlarge_eu_0, ls_IQueryService);
		ls_Service = Cons(olive___QueryServiceImpl_0_c3_xlarge_eu_0, ls_Service);
		ls_EndPoint = Cons(olive___QueryServiceImpl_0_c3_xlarge_eu_0, ls_EndPoint);
		[DC: c3_xlarge_us_0] IQueryService olive___QueryServiceImpl_0_c3_xlarge_us_0 = new QueryServiceImpl(oDef___DeploymentServiceImpl_0_c3_xlarge_us_0, "Customer X", False);
		ls_IQueryService = Cons(olive___QueryServiceImpl_0_c3_xlarge_us_0, ls_IQueryService);
		ls_Service = Cons(olive___QueryServiceImpl_0_c3_xlarge_us_0, ls_Service);
		ls_EndPoint = Cons(olive___QueryServiceImpl_0_c3_xlarge_us_0, ls_EndPoint);
	}

	Unit undeploy() {
		ls_EndPoint = Nil;
		ls_IQueryService = Nil;
		ls_Service = Nil;
		ls_ServiceProvider = Nil;
		ls_LoadBalancerService = Nil;
		ls_DeploymentService = Nil;
		ls_PlatformService = Nil;
		ls_MonitorPlatformService = Nil;
		while ( !isEmpty(ls_DeploymentComponent) ) {
			cloudProvider.shutdownInstance(head(ls_DeploymentComponent));
			ls_DeploymentComponent = tail(ls_DeploymentComponent);
		}
	}
}

productline SmartDeployProductLine;
features SmartDeployFeature;
delta SmartDeployDelta when SmartDeployFeature;
product SmartDeploy (SmartDeployFeature);
